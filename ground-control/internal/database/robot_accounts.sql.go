// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: robot_accounts.sql

package database

import (
	"context"
)

const addRobotAccount = `-- name: AddRobotAccount :one
INSERT INTO robot_accounts (robot_name, robot_secret, robot_id, satellite_id, created_at, updated_at)
VALUES ($1, $2, $3, $4, NOW(), NOW())
  ON CONFLICT (robot_id)
  DO UPDATE SET
  robot_name = EXCLUDED.robot_name,
  robot_secret = EXCLUDED.robot_secret,
  updated_at = NOW()
RETURNING id, robot_name, robot_secret, robot_id, satellite_id, created_at, updated_at
`

type AddRobotAccountParams struct {
	RobotName   string
	RobotSecret string
	RobotID     string
	SatelliteID int32
}

func (q *Queries) AddRobotAccount(ctx context.Context, arg AddRobotAccountParams) (RobotAccount, error) {
	row := q.db.QueryRowContext(ctx, addRobotAccount,
		arg.RobotName,
		arg.RobotSecret,
		arg.RobotID,
		arg.SatelliteID,
	)
	var i RobotAccount
	err := row.Scan(
		&i.ID,
		&i.RobotName,
		&i.RobotSecret,
		&i.RobotID,
		&i.SatelliteID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteRobotAccount = `-- name: DeleteRobotAccount :exec
DELETE FROM robot_accounts
WHERE id = $1
`

func (q *Queries) DeleteRobotAccount(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteRobotAccount, id)
	return err
}

const getRobotAccBySatelliteID = `-- name: GetRobotAccBySatelliteID :one
SELECT id, robot_name, robot_secret, robot_id, satellite_id, created_at, updated_at FROM robot_accounts
WHERE satellite_id = $1
`

func (q *Queries) GetRobotAccBySatelliteID(ctx context.Context, satelliteID int32) (RobotAccount, error) {
	row := q.db.QueryRowContext(ctx, getRobotAccBySatelliteID, satelliteID)
	var i RobotAccount
	err := row.Scan(
		&i.ID,
		&i.RobotName,
		&i.RobotSecret,
		&i.RobotID,
		&i.SatelliteID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getRobotAccount = `-- name: GetRobotAccount :one
SELECT id, robot_name, robot_secret, robot_id, satellite_id, created_at, updated_at FROM robot_accounts
WHERE id = $1
`

func (q *Queries) GetRobotAccount(ctx context.Context, id int32) (RobotAccount, error) {
	row := q.db.QueryRowContext(ctx, getRobotAccount, id)
	var i RobotAccount
	err := row.Scan(
		&i.ID,
		&i.RobotName,
		&i.RobotSecret,
		&i.RobotID,
		&i.SatelliteID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listRobotAccounts = `-- name: ListRobotAccounts :many
SELECT id, robot_name, robot_secret, robot_id, satellite_id, created_at, updated_at FROM robot_accounts
`

func (q *Queries) ListRobotAccounts(ctx context.Context) ([]RobotAccount, error) {
	rows, err := q.db.QueryContext(ctx, listRobotAccounts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RobotAccount
	for rows.Next() {
		var i RobotAccount
		if err := rows.Scan(
			&i.ID,
			&i.RobotName,
			&i.RobotSecret,
			&i.RobotID,
			&i.SatelliteID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRobotAccount = `-- name: UpdateRobotAccount :exec
UPDATE robot_accounts
SET robot_name = $2,
    robot_secret = $3,
    robot_id = $4,
    updated_at = NOW()
WHERE id = $1
`

type UpdateRobotAccountParams struct {
	ID          int32
	RobotName   string
	RobotSecret string
	RobotID     string
}

func (q *Queries) UpdateRobotAccount(ctx context.Context, arg UpdateRobotAccountParams) error {
	_, err := q.db.ExecContext(ctx, updateRobotAccount,
		arg.ID,
		arg.RobotName,
		arg.RobotSecret,
		arg.RobotID,
	)
	return err
}
