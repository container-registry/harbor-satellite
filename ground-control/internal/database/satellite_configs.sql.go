// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: satellite_configs.sql

package database

import (
	"context"
)

const configSatelliteList = `-- name: ConfigSatelliteList :many
SELECT satellite_id, config_id FROM satellite_configs
WHERE config_id = $1
`

func (q *Queries) ConfigSatelliteList(ctx context.Context, configID int32) ([]SatelliteConfig, error) {
	rows, err := q.db.QueryContext(ctx, configSatelliteList, configID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SatelliteConfig
	for rows.Next() {
		var i SatelliteConfig
		if err := rows.Scan(&i.SatelliteID, &i.ConfigID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeSatelliteFromConfig = `-- name: RemoveSatelliteFromConfig :exec
DELETE FROM satellite_configs
WHERE satellite_id = $1 AND config_id = $2
`

type RemoveSatelliteFromConfigParams struct {
	SatelliteID int32
	ConfigID    int32
}

func (q *Queries) RemoveSatelliteFromConfig(ctx context.Context, arg RemoveSatelliteFromConfigParams) error {
	_, err := q.db.ExecContext(ctx, removeSatelliteFromConfig, arg.SatelliteID, arg.ConfigID)
	return err
}

const satelliteConfig = `-- name: SatelliteConfig :one
SELECT satellite_id, config_id FROM satellite_configs
WHERE satellite_id = $1
`

func (q *Queries) SatelliteConfig(ctx context.Context, satelliteID int32) (SatelliteConfig, error) {
	row := q.db.QueryRowContext(ctx, satelliteConfig, satelliteID)
	var i SatelliteConfig
	err := row.Scan(&i.SatelliteID, &i.ConfigID)
	return i, err
}

const setSatelliteConfig = `-- name: SetSatelliteConfig :exec
INSERT INTO satellite_configs (satellite_id, config_id)
VALUES ($1, $2)
ON CONFLICT (satellite_id)
DO UPDATE SET config_id = EXCLUDED.config_id
`

type SetSatelliteConfigParams struct {
	SatelliteID int32
	ConfigID    int32
}

func (q *Queries) SetSatelliteConfig(ctx context.Context, arg SetSatelliteConfigParams) error {
	_, err := q.db.ExecContext(ctx, setSatelliteConfig, arg.SatelliteID, arg.ConfigID)
	return err
}
