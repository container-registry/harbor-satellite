// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: satellite_token.sql

package database

import (
	"context"
)

const addToken = `-- name: AddToken :one
INSERT INTO satellite_token (satellite_id, token, created_at, updated_at)
VALUES ($1, $2, NOW(), NOW())
RETURNING token
`

type AddTokenParams struct {
	SatelliteID int32
	Token       string
}

func (q *Queries) AddToken(ctx context.Context, arg AddTokenParams) (string, error) {
	row := q.db.QueryRowContext(ctx, addToken, arg.SatelliteID, arg.Token)
	var token string
	err := row.Scan(&token)
	return token, err
}

const deleteToken = `-- name: DeleteToken :exec
DELETE FROM satellite_token
WHERE token = $1
`

func (q *Queries) DeleteToken(ctx context.Context, token string) error {
	_, err := q.db.ExecContext(ctx, deleteToken, token)
	return err
}

const getSatelliteIDByToken = `-- name: GetSatelliteIDByToken :one
SELECT satellite_id
FROM satellite_token
WHERE token = $1
`

func (q *Queries) GetSatelliteIDByToken(ctx context.Context, token string) (int32, error) {
	row := q.db.QueryRowContext(ctx, getSatelliteIDByToken, token)
	var satellite_id int32
	err := row.Scan(&satellite_id)
	return satellite_id, err
}

const getToken = `-- name: GetToken :one
SELECT id, satellite_id, token, created_at, updated_at FROM satellite_token
WHERE id = $1
`

func (q *Queries) GetToken(ctx context.Context, id int32) (SatelliteToken, error) {
	row := q.db.QueryRowContext(ctx, getToken, id)
	var i SatelliteToken
	err := row.Scan(
		&i.ID,
		&i.SatelliteID,
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listToken = `-- name: ListToken :many
SELECT id, satellite_id, token, created_at, updated_at FROM satellite_token
`

func (q *Queries) ListToken(ctx context.Context) ([]SatelliteToken, error) {
	rows, err := q.db.QueryContext(ctx, listToken)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SatelliteToken
	for rows.Next() {
		var i SatelliteToken
		if err := rows.Scan(
			&i.ID,
			&i.SatelliteID,
			&i.Token,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
