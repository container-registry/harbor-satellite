// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: satellites.sql

package database

import (
	"context"
)

const createSatellite = `-- name: CreateSatellite :one
INSERT INTO satellites (name, created_at, updated_at)
VALUES ($1, NOW(), NOW())
RETURNING id, name, created_at, updated_at
`

func (q *Queries) CreateSatellite(ctx context.Context, name string) (Satellite, error) {
	row := q.db.QueryRowContext(ctx, createSatellite, name)
	var i Satellite
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteSatellite = `-- name: DeleteSatellite :exec
DELETE FROM satellites
WHERE id = $1
`

func (q *Queries) DeleteSatellite(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteSatellite, id)
	return err
}

const deleteSatelliteByName = `-- name: DeleteSatelliteByName :exec
DELETE FROM satellites
WHERE name = $1
`

func (q *Queries) DeleteSatelliteByName(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, deleteSatelliteByName, name)
	return err
}

const getSatellite = `-- name: GetSatellite :one
SELECT id, name, created_at, updated_at FROM satellites
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetSatellite(ctx context.Context, id int32) (Satellite, error) {
	row := q.db.QueryRowContext(ctx, getSatellite, id)
	var i Satellite
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSatelliteByName = `-- name: GetSatelliteByName :one
SELECT id, name, created_at, updated_at FROM satellites
WHERE name = $1 LIMIT 1
`

func (q *Queries) GetSatelliteByName(ctx context.Context, name string) (Satellite, error) {
	row := q.db.QueryRowContext(ctx, getSatelliteByName, name)
	var i Satellite
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSatelliteID = `-- name: GetSatelliteID :one

SELECT id FROM satellites
WHERE name = $1 LIMIT 1
`

// -- name: GetSatelliteByToken :one
// SELECT * FROM satellites
// WHERE token = $1 LIMIT 1;
func (q *Queries) GetSatelliteID(ctx context.Context, name string) (int32, error) {
	row := q.db.QueryRowContext(ctx, getSatelliteID, name)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const getSatellitesByGroupName = `-- name: GetSatellitesByGroupName :many
SELECT s.id, s.name, s.created_at, s.updated_at
FROM satellites s
JOIN satellite_groups sg ON sg.satellite_id = s.id
JOIN groups g ON g.id = sg.group_id
WHERE g.group_name = $1
`

func (q *Queries) GetSatellitesByGroupName(ctx context.Context, groupName string) ([]Satellite, error) {
	rows, err := q.db.QueryContext(ctx, getSatellitesByGroupName, groupName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Satellite
	for rows.Next() {
		var i Satellite
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSatellites = `-- name: ListSatellites :many
SELECT id, name, created_at, updated_at FROM satellites
`

func (q *Queries) ListSatellites(ctx context.Context) ([]Satellite, error) {
	rows, err := q.db.QueryContext(ctx, listSatellites)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Satellite
	for rows.Next() {
		var i Satellite
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
